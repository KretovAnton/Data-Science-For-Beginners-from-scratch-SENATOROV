"""Intro.

Задание №20.
"""

# quiz1
#
# 1) Как понять, что домашка пришла?
# 0:06 В телеграм-чате Homework если я вижу в сообщении свой ник и "прими пул" - значит домашка пришла.
# 2) Как принять домашку?
# 0:16 В Github Desktop нажимаем Fetch Origin.
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# 0:31 Во вкладке History мы видим коммиты (верхний самый свежий).
# Функции при нажатии правой кнопки мыши: Amend commit, Reset to commit, Checkout commit, Reorder commit,
# Revert changes in commit, и др.
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# Ссылку на наш коммит берем из github.com и отправляем в чат Телеграм Homework (коммит отдал + ссылка на коммит)
# 4) Что такое файл лога?
# 1:12 документ, который нужно заполнять в конце каждого урока (дата урока, что запомнили, делали)
# 4.1) Когда нужно его пушить?
# После выполнения задания, каждый день.
# 5) Что такое интерпритатор?
# 2:50 Интерпритатор - программа, которая читает и запускает наш код.
# 6) Где можно выбрать интерпритатор?
# 2:50 Интерпритатор можно выбрать в меню, в верхней части экрана VS Code, после нажатия кнопки Пуск. Или справа вверху.
# 7) Что такое модуль?
# Модуль - это файл, в котором мы пишем.
# 8) Как создать и отправить коммит?
# 12:00 Пишем имя коммита в Гитхаб Декстоп, нажимаем на кнопку Commit to main.
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# 13:15 Заходим в Гитхаб десктом - History - нажимаем правой кнопкой мыши на последний коммит - View on GitHub - видим наш коммит в github
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# pre-commit run --all-files - команда проверки на литеры (на сколько у нас корректно все написано в файлике согласно всем стандартам)
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# Pylint - проверка синтаксиса, ошибок.
# Flake8 - проверка синтаксиса, ошибок.
# pycodestyle - проверка соответствия кода PEP 8.
# 11) Как узнать какой именно линтер не прошёл проверку?
# 5:20 Посмотреть, напротив какой секции(имени линтера) надпись Failed
# 12) Линтер Pylint видит markdown?
# 7:05 Линтер не видит маркдаун
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# 7:30 Линтер не видит ячейки маркдаун, он их игнорирует, по этому, номер ячейки в терминале и в vs code может отличаться.
# 14) Где посмотреть номер ячейки в vscode?
# 6:45 Номера ячейки можно посмотреть справа снизу (Cell 1 of 1, например)
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# Формат .ipynb отображается в формате JSON в гитхабе.
# 16) Где посмотреть в какой ячейке ошибка?
# 5:40 Номер ячейки, в которой ошибка, показывает линтер в детализации.
# 17) Как запустить терминал?
# 5:55 Во вкладке Terminal выбираем Nes terminal
# 18) Что такое линтер?
# 6:15 Линтер - программа, которая проверяет наш файл на корректность
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# 8:15 https://pylint.readthedocs.io/
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# 10:10 Когда мы закрыли ошибки по pylint.
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# 9:25 в описании модуля можно коротко описать какая информация в модуле.
# 21) С какой  git команды начинается утро программиста?
# 15:10 Fetch origin
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# 14:20 Наводим мышкой на Current repository - правая кнопка мыши - Open in VS Code
# 23) Что такое stash?
#   Общее объяснение концепции.
# Stash - это временное хранилище, которое позволяет сохранять изменения в рабочей директории без фиксации их в коммите.
# Stash - стэш это буфер куда мы временно прячем файлы, чтобы принять pull
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531):
# git stash save "NAME_STASH"
#   Кнопка в vs code:
# В панели Git навести курсор на Changes и нажать на кнопку Stash changes
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
# View stash - stashed changes - restore
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
# git stash apply "NUMBER_STASH"
# 23.3) Различие между стэшем и коммитом.
# Стеш сохраняет во временном локальном репозитории, коммит фиксирует изменение в Git
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
# Стеш - черновик(когда изменения еще не готовы для коммита), коммит - чистовик. В стеше можно сохранять когда над одним файлом работает несколько разработчиков.
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# git stash list: show all the stashes
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# git stash drop
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
# Когда несколько разработчиков вносят изменения в один файл.
# Когда нет уверенности, что изменения готовы для коммита.
#
# 24) Где посмотреть что есть конфликт в файлах?
# В Гитхаб декстоп при нажатии Pull origin, появляется ошибка с возможностью сохранить изменения в стеш (Stash changes and continue)
# 24.1) Когда он появляется?
# Когда несколько разработчиков изменили один и тот же файл.
# 25) Как решить конфликт в файлах?
# Сохраняем локальные изменения в буфер обмена (стеш), принимаем изменения из интернета, восстанавливаем наши локальные изменения (Stashed changes - restore), нажимаем правой кнопкой на файл - Open in VS Code - устраняем конфликт.
# 26) Напишите правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
# 16:30 Зелёное то что пришло с гитхаба и синее локальные изменения.
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# Да.
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# Может появится конфликт, если разные разработчики поменяли одни и те же строки в файле.
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# 4 способа:
# Можно нажать в VS Code кнопку Accept Current change - примется то, что пришло с гитхаба (зеленое)
# Можно нажать Accept Incoming change - примутся локальные изменения на компьютере (синее)
# Можно нажать Accept Both changes - принять оба изменения.
# Можно в ручную устранять конфликт, удаляя то, что нам не нужно, после нажать Resolve in Merge Editor
# 29) Что делает кнопка complete merge?
# 17:45 Устранение конфликта.
# 30) В какой чат нужно писать если остались вопросы?
# В Телеграмм HELP ME (bags&reports)
# 31) Что такое FORK? Зачем его делают?
# 19:20 Чтобы можно было скопировать чужой репозиторий и сделать его личным.
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# 19:35 В гитхаб декстоп на кнопке Add выбираем Clone Repoditory, выбираем нужный репозиторий из списка.
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# С большой вероятность, особенно, если задание было сложным. С ними столкнулись участники сообщества и помогли друг другу решить их.
# 34) Как создать файл в vs code?
# Нажать на иконку New untitled Text file
# 35) Файл лога нужно заполнять в конце каждого урока?
# Да.

# quiz2
#
# 1. Как включить автосохранение данных в VSCODE?
# 0:10 File - Auto save
# 2. Как настроить перенос строки?
# 0:15 File - Preferences - Settings - пишем wrap - в выпадающем меню выбираем wordWrapColumn - Word Wrap Column пишем 79
# 3. Сколько символов по pep8 разрешено на строке?
# Не больше 79 символов на строку.
# 4. Какие способы переноса строк показаны в видео:
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# В VS Code есть встроенные линтеры. В терминале, во вкладке Problems можно увидеть проблемы в коде(помечены красным крестиком) и ссылку на сайт с комментарием этих проблем.
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# Кнопка с 3-мя кружочками. В разделе Source control можно отправить коммит - пишем название коммита, нажимаем Commit & Push
# Домашка принимается с помощью кнопки Pull
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# Раздел Gitlens рядом с терминалом показывает коммиты (как во вкладке History в гитхаб деслтоп).
# 8. Как вставить картинку в маркдаун?
# Сделать скриншот - ctrl+V
# 9. Где посмотреть длину строки в vs code?
# Создаем любой файл .py, вставляем туда нашу строку выюеляем ее и смотрим снизу длинну строки.
# 10. Как поменять тип ячейки с питона на маркдаун?
# Выбрать в меню блока(снизу) нужный тип.
# 11. Как запустить сразу все ячейки в юпитере?
# Нажать сверху Run All
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# Нужно знать HTML и поместить картинку в тег img
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# Shift + Enter
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# Зайти в ... блока, поставить галочку Show cell line nimbers
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# Сразу видим, какая ячейка у нас отвалилась. Чтобы перейти на ячейку с ошибкой нужно нажать на "Go To".
# 16. Как очистить вывод ячеек которые уже запущены?
# Нажать на верхней панели Clear all outputs
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# Нужно нажать Split Edit справа сверху.
# 18. Каким сочетанием убирается левый сайдбар?
# Ctrl + B
# 19. Кнопка два листочка это наши локальные файлы?
# Да
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# DICT
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и ttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# Да, сохранил в закладки, буду пользоваться как справочной литературой.
# 22. Что такое валидация?
# Валидация - это процесс проверки кода линтерами.
# 23. Что такое трассировка ошибки?
# Визуализация ошибки. Указывает строку и название ошибки.
# 24. Что значит отвалился интерпритатор?
# Интерпретатор выдал ошибку в виде красного креста в кружочке и появилась надпись Error.
#
